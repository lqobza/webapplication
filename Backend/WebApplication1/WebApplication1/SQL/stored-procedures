--Exists SP:
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

IF @@ERROR <> 0
    SET NOEXEC ON;
GO

IF OBJECT_ID(N'[dbo].[CheckMerchExistence]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[CheckMerchExistence];
GO

CREATE PROC [dbo].[CheckMerchExistence]
(
    @categoryId INT,
    @name NVARCHAR(255),
    @brandId INT,
    @exists BIT OUTPUT
)
AS
BEGIN
    SET @exists = 0;

    IF EXISTS (
        SELECT 1
        FROM Merch
        WHERE category_id = @categoryId
          AND name = @name
          AND brand_id = @brandId
    )
    BEGIN
        SET @exists = 1;
    END
END
GO

--GetAllMerchandise stored procedure:
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

-- Drop the existing stored procedure if it exists
IF OBJECT_ID(N'[dbo].[GetAllMerchandise]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[GetAllMerchandise];
GO

CREATE PROC [dbo].[GetAllMerchandise]
    @PageNumber int = 1,
    @PageSize int = 10
AS
BEGIN TRY
    DECLARE @TotalCount int;
    SELECT @TotalCount = COUNT(DISTINCT m.id) FROM Merch m;

    WITH PaginatedMerch AS (
        SELECT DISTINCT m.id
        FROM Merch m
        ORDER BY m.id
        OFFSET ((@PageNumber - 1) * @PageSize) ROWS
            FETCH NEXT @PageSize ROWS ONLY
    )
    SELECT
        m.id,
        m.category_id,
        c.name AS CategoryName,
        m.name,
        m.price,
        m.description,
        m.brand_id,
        b.name AS BrandName,
        t.id AS theme_id,
        t.name AS theme_name,
        ms.id AS size_id,
        ms.size AS size_name,
        ms.instock AS size_in_stock,
        @TotalCount AS TotalCount
    FROM PaginatedMerch pm
             INNER JOIN Merch m ON pm.id = m.id
             INNER JOIN Category c ON m.category_id = c.id
             INNER JOIN Brand b ON m.brand_id = b.id
             LEFT JOIN MerchTheme mt ON m.id = mt.merch_id
             LEFT JOIN Theme t ON mt.theme_id = t.id
             LEFT JOIN MerchSize ms ON m.id = ms.merch_id
    ORDER BY m.id;
END TRY
BEGIN CATCH
    -- Handle errors
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;

    -- Capture and raise error information
    DECLARE @MSG NVARCHAR(4000),
        @RC INT,
        @PR NVARCHAR(126),
        @LN INT;

    SELECT @MSG = ERROR_MESSAGE(),
           @RC = ERROR_NUMBER(),
           @PR = ERROR_PROCEDURE(),
           @LN = ERROR_LINE();

    RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s',
        11, 1, @RC, @PR, @LN, @MSG) WITH LOG, NOWAIT;
END CATCH;
GO

--GetMerchandiseById stored procedure:
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

-- Drop the existing stored procedure if it exists
IF OBJECT_ID(N'[dbo].[GetMerchandiseById]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[GetMerchandiseById];
GO

CREATE PROC [dbo].[GetMerchandiseById]
@Id INT
AS
BEGIN TRY
    SELECT
        m.id,
        m.category_id,
        c.name AS CategoryName,
        m.name,
        m.price,
        m.description,
        m.brand_id,
        b.name AS BrandName,
        r.id AS rating_id,
        r.rating AS rating_value,
        r.description AS rating_description,
        r.created_at AS rating_created_at,
        t.id AS theme_id,
        t.name AS theme_name,
        ms.id AS size_id,
        ms.size AS size_name,
        ms.instock AS size_in_stock
    FROM Merch m
             INNER JOIN Category c ON m.category_id = c.id
             INNER JOIN Brand b ON m.brand_id = b.id
             LEFT JOIN Ratings r ON m.id = r.merch_id
             LEFT JOIN MerchTheme mt ON m.id = mt.merch_id
             LEFT JOIN Theme t ON mt.theme_id = t.id
             LEFT JOIN MerchSize ms ON m.id = ms.merch_id
    WHERE m.id = @Id
    ORDER BY ms.size;
END TRY
BEGIN CATCH
    -- Handle errors
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;

    -- Capture and raise error information
    DECLARE @MSG NVARCHAR(4000),
        @RC INT,
        @PR NVARCHAR(126),
        @LN INT;

    SELECT @MSG = ERROR_MESSAGE(),
           @RC = ERROR_NUMBER(),
           @PR = ERROR_PROCEDURE(),
           @LN = ERROR_LINE();

    RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s',
        11, 1, @RC, @PR, @LN, @MSG) WITH LOG, NOWAIT;
END CATCH;
GO

--GetMerchandiseBySize SP
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

IF OBJECT_ID(N'[dbo].[GetMerchandiseBySize]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[GetMerchandiseBySize];
GO
CREATE PROCEDURE [dbo].[GetMerchandiseBySize]
    @size NVARCHAR(255)
AS
BEGIN TRY
    SELECT
        m.id,
        m.category_id,
        c.name as CategoryName,
        m.name,
        m.price,
        m.description,
        m.brand_id,
        b.name as BrandName
    FROM
        Merch m
            JOIN
        Brand b ON m.brand_id = b.id
            JOIN
        Category c ON m.category_id = c.id
    WHERE
        m.id IN (
        SELECT merch_id
        FROM MerchSize
        WHERE size = @size
        )
    RETURN 0;
END TRY
BEGIN CATCH
    DECLARE @MSG NVARCHAR(4000),
        @RC INT,
        @PR NVARCHAR(126),
        @LN INT;
    SELECT @MSG = ERROR_MESSAGE(),
           @RC = ERROR_NUMBER(),
           @PR = ERROR_PROCEDURE(),
           @LN = ERROR_LINE();
    RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s', 11, 1, @RC, @PR, @LN, @MSG) WITH LOG, NOWAIT;
END CATCH
GO

--GetMerchandiseByCategory SP
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

IF OBJECT_ID(N'[dbo].[GetMerchandiseByCategory]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[GetMerchandiseByCategory];
GO

CREATE PROCEDURE [dbo].[GetMerchandiseByCategory]
(
    @CategoryId INT
)
AS
BEGIN TRY
    SELECT
        m.id,
        m.category_id,
        c.name AS CategoryName,
        m.name,
        m.price,
        m.description,
        m.brand_id,
        b.name AS BrandName
    FROM
        Merch m
            JOIN
        Brand b ON m.brand_id = b.id
            JOIN
        Category c ON m.category_id = c.id
    WHERE
            m.category_id = @CategoryId;
    RETURN 0;
END TRY
BEGIN CATCH
    -- Handle errors here
    DECLARE @MSG NVARCHAR(4000),
        @RC INT,
        @PR NVARCHAR(126),
        @LN INT;
    SELECT @MSG = ERROR_MESSAGE(),
           @RC = ERROR_NUMBER(),
           @PR = ERROR_PROCEDURE(),
           @LN = ERROR_LINE();
    RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s', 11, 1, @RC, @PR, @LN, @MSG) WITH LOG, NOWAIT;
END CATCH
GO

--InsertMerchandise
CREATE PROCEDURE [dbo].[InsertMerchandise]
(
    @categoryId INT,
    @name NVARCHAR(MAX),
    @price DECIMAL(10, 2),
    @description NVARCHAR(MAX),
    @brandId INT,
    @sizes dbo.MerchSizeType READONLY,
    @themes dbo.MerchThemeType READONLY
)
AS
BEGIN TRY
    SET NOCOUNT ON;

    BEGIN TRANSACTION;

    DECLARE @newMerchId TABLE (ID INT);

    INSERT INTO Merch (category_id, name, price, description, brand_id)
    OUTPUT INSERTED.ID INTO @newMerchId
    VALUES (@categoryId, @name, @price, @description, @brandId);

    IF EXISTS (SELECT 1 FROM @sizes)
        BEGIN
            INSERT INTO MerchSize (merch_id, size, instock)
            SELECT (SELECT ID FROM @newMerchId), Size, InStock
            FROM @sizes;
        END

    IF EXISTS (SELECT 1 FROM @themes)
        BEGIN
            INSERT INTO MerchTheme (merch_id, theme_id)
            SELECT (SELECT ID FROM @newMerchId), ThemeId
            FROM @themes;
        END

    COMMIT TRANSACTION;

    RETURN 0;
END TRY
BEGIN CATCH
    -- Rollback the transaction in case of an error
    IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

    -- Handle errors
    DECLARE @MSG NVARCHAR(4000),
        @RC INT,
        @PR NVARCHAR(126),
        @LN INT;
    SELECT @MSG = ERROR_MESSAGE(),
           @RC = ERROR_NUMBER(),
           @PR = ERROR_PROCEDURE(),
           @LN = ERROR_LINE();
    RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s', 11, 1, @RC, @PR, @LN, @MSG) WITH LOG, NOWAIT;
END CATCH
GO


--DeleteMerchandiseById
IF OBJECT_ID(N'[dbo].[DeleteMerchandiseById]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[DeleteMerchandiseById];
GO
CREATE PROCEDURE [dbo].[DeleteMerchandiseById]
(
    @id INT
)
AS
BEGIN
    BEGIN TRY
        DELETE FROM MerchSize WHERE merch_id = @id;
        DELETE FROM MerchTheme WHERE merch_id = @id;
        DELETE FROM MerchandiseImages WHERE MerchId = @id;
        
        DELETE FROM Merch WHERE id = @id;

        RETURN 0;
    END TRY
    BEGIN CATCH
        -- Handle errors here
        DECLARE @ErrorMessage NVARCHAR(4000),
            @ErrorNumber INT,
            @ErrorProcedure NVARCHAR(126),
            @ErrorLine INT;

        SELECT @ErrorMessage = ERROR_MESSAGE(),
               @ErrorNumber = ERROR_NUMBER(),
               @ErrorProcedure = ERROR_PROCEDURE(),
               @ErrorLine = ERROR_LINE();

        RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s', 16, 1, @ErrorNumber, @ErrorProcedure, @ErrorLine, @ErrorMessage) WITH LOG, NOWAIT;
    END CATCH
END
GO

--UpdateMerchandise
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

IF OBJECT_ID(N'[dbo].[UpdateMerchandise]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[UpdateMerchandise];
GO

CREATE PROCEDURE [dbo].[UpdateMerchandise]
(
    @Id INT,
    @Price INT = NULL,
    @Description NVARCHAR(255) = NULL
)
AS
BEGIN
    DECLARE @UpdateFields NVARCHAR(MAX) = '';

    SET @UpdateFields = CASE
        WHEN @Price IS NOT NULL AND @Description IS NOT NULL THEN 'price = @Price, description = @Description'
        WHEN @Price IS NOT NULL THEN 'price = @Price'
        WHEN @Description IS NOT NULL THEN 'description = @Description'
    END;

    IF @UpdateFields IS NULL
        RAISERROR (N'No fields provided to update.', 11, 1)
            WITH LOG, NOWAIT;

    DECLARE @UpdateQuery NVARCHAR(MAX) =
            N'UPDATE Merch SET ' + @UpdateFields + N' WHERE id = @Id';

    EXEC sp_executesql @UpdateQuery,
         N'@Id INT, @Price INT, @Description NVARCHAR(255)',
         @Id, @Price, @Description;

    SELECT @@ROWCOUNT AS RowsAffected;
END
GO

--AddCategoryToDb
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

IF OBJECT_ID(N'[dbo].[InsertCategory]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[InsertCategory];
GO

CREATE PROCEDURE [dbo].[InsertCategory]
(
    @name NVARCHAR(MAX)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @categoryId INT;
        -- Check if the category already exists
        IF EXISTS (SELECT 1 FROM Category WHERE name = @name)
            BEGIN
                -- Category already exists, return appropriate error message
                RAISERROR (N'Category with name %s already exists.', 11, 1, @name) WITH LOG, NOWAIT;
            END
        ELSE
            BEGIN
                -- Insert new category and capture the inserted ID
                INSERT INTO Category (name)
                VALUES (@name);

                -- Capture the inserted ID using SCOPE_IDENTITY
                SET @categoryId = SCOPE_IDENTITY();

                -- Return the inserted category ID
                SELECT @categoryId AS NewCategoryId;
            END
    END TRY
    BEGIN CATCH
        -- Handle errors here
        DECLARE @MSG NVARCHAR(4000),
            @RC INT,
            @PR NVARCHAR(126),
            @LN INT;
        SELECT @MSG = ERROR_MESSAGE(),
               @RC = ERROR_NUMBER(),
               @PR = ERROR_PROCEDURE(),
               @LN = ERROR_LINE();
        RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s', 11, 1, @RC, @PR, @LN, @MSG) WITH LOG, NOWAIT;
    END CATCH
END
GO


--AddThemeToDb
SET NOCOUNT ON;
SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

IF OBJECT_ID(N'[dbo].[InsertTheme]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[InsertTheme];
GO

CREATE PROCEDURE [dbo].[InsertTheme]
(
    @name NVARCHAR(MAX)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @themeId INT;
        -- Check if the category already exists
        IF EXISTS (SELECT 1 FROM Theme WHERE name = @name)
            BEGIN
                -- Category already exists, return appropriate error message
                RAISERROR (N'Theme with name %s already exists.', 11, 1, @name) WITH LOG, NOWAIT;
            END
        ELSE
            BEGIN
                -- Insert new category and capture the inserted ID
                INSERT INTO Theme (name)
                VALUES (@name);

                -- Capture the inserted ID using SCOPE_IDENTITY
                SET @themeId = SCOPE_IDENTITY();

                -- Return the inserted category ID
                SELECT @themeId AS NewThemeId;
            END
    END TRY
    BEGIN CATCH
        -- Handle errors here
        DECLARE @MSG NVARCHAR(4000),
            @RC INT,
            @PR NVARCHAR(126),
            @LN INT;
        SELECT @MSG = ERROR_MESSAGE(),
               @RC = ERROR_NUMBER(),
               @PR = ERROR_PROCEDURE(),
               @LN = ERROR_LINE();
        RAISERROR (N'Database Error: %d, Procedure: %s, Line: %d, Text: %s', 11, 1, @RC, @PR, @LN, @MSG) WITH LOG, NOWAIT;
    END CATCH
END
GO


--[dbo].[SearchMerchandise] stored procedure:
CREATE OR ALTER PROCEDURE [dbo].[SearchMerchandise]
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @Keywords NVARCHAR(255) = NULL,
    @MinPrice INT = NULL,
    @MaxPrice INT = NULL,
    @CategoryId INT = NULL,
    @SortBy NVARCHAR(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Offset INT = (@PageNumber - 1) * @PageSize;

    -- First get distinct merchandise IDs that match the filter criteria
    WITH MatchingMerch AS (
        SELECT DISTINCT
            m.id,
            m.name,
            m.price
        FROM
            dbo.Merch m
        WHERE
            (@Keywords IS NULL OR m.name LIKE '%' + @Keywords + '%')
          AND (@MinPrice IS NULL OR m.price >= @MinPrice)
          AND (@MaxPrice IS NULL OR m.price <= @MaxPrice)
          AND (@CategoryId IS NULL OR m.category_id = @CategoryId)
    ),
         -- Apply sorting and pagination to the distinct merchandise IDs
         SortedMerch AS (
             SELECT
                 id,
                 ROW_NUMBER() OVER (
                     ORDER BY
                         CASE WHEN @SortBy = 'NameAsc' THEN name END ASC,
                         CASE WHEN @SortBy = 'NameDesc' THEN name END DESC,
                         CASE WHEN @SortBy = 'PriceAsc' THEN price END ASC,
                         CASE WHEN @SortBy = 'PriceDesc' THEN price END DESC,
                         CASE WHEN @SortBy IS NULL OR @SortBy = '' THEN id END ASC
                     ) AS RowNum,
                 COUNT(*) OVER() AS TotalCount
             FROM
                 MatchingMerch
         ),
         -- Get the paginated merchandise IDs
         PaginatedMerch AS (
             SELECT
                 id,
                 TotalCount
             FROM
                 SortedMerch
             WHERE
                     RowNum > @Offset AND RowNum <= (@Offset + @PageSize)
         )
         -- Join back to get all the detailed information
    SELECT
        m.id,
        m.category_id,
        c.name AS CategoryName,
        m.name,
        m.price,
        m.description,
        m.brand_id,
        b.name AS BrandName,
        t.id AS theme_id,
        t.name AS theme_name,
        ms.id AS size_id,
        ms.size AS size_name,
        ms.instock AS size_in_stock,
        p.TotalCount
    FROM
        PaginatedMerch p
            INNER JOIN
        dbo.Merch m ON p.id = m.id
            INNER JOIN
        dbo.Category c ON m.category_id = c.id
            INNER JOIN
        dbo.Brand b ON m.brand_id = b.id
            LEFT JOIN
        dbo.MerchTheme mt ON m.id = mt.merch_id
            LEFT JOIN
        dbo.Theme t ON mt.theme_id = t.id
            LEFT JOIN
        dbo.MerchSize ms ON m.id = ms.merch_id
    ORDER BY
        CASE WHEN @SortBy = 'NameAsc' THEN m.name END ASC,
        CASE WHEN @SortBy = 'NameDesc' THEN m.name END DESC,
        CASE WHEN @SortBy = 'PriceAsc' THEN m.price END ASC,
        CASE WHEN @SortBy = 'PriceDesc' THEN m.price END DESC,
        CASE WHEN @SortBy IS NULL OR @SortBy = '' THEN m.id END ASC;
END

-- Helper stored procedure for future column additions
CREATE OR ALTER PROCEDURE AddColumnIfNotExists
    @tableName NVARCHAR(128),
    @columnName NVARCHAR(128),
    @columnDefinition NVARCHAR(MAX)
AS
BEGIN
    DECLARE @sql NVARCHAR(MAX)
    IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(@tableName) AND name = @columnName)
    BEGIN
        SET @sql = N'ALTER TABLE ' + QUOTENAME(@tableName) + 
                   N' ADD ' + QUOTENAME(@columnName) + N' ' + @columnDefinition
        EXEC sp_executesql @sql
        PRINT 'Added ' + @columnName + ' column to ' + @tableName + ' table'
    END
END; 